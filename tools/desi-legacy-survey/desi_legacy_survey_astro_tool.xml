<tool id="desi_legacy_survey_astro_tool" name="DESI Legacy Survey" version="0.0.2+galaxy0" profile="24.0">
  <requirements>
    <requirement type="package" version="6.1.4">astropy</requirement>
    <requirement type="package" version="3.10.3">matplotlib</requirement>
    <requirement type="package" version="1.21.4">wget</requirement>
    <requirement type="package" version="7.16.6">nbconvert</requirement>
    <requirement type="package" version="0.4.10">astroquery</requirement>
    <requirement type="package" version="1.2.33">oda-api</requirement>
    <requirement type="package" version="9.3.0">ipython</requirement>
    <!--Requirements string 'nb2workflow>=1.3.30' can't be converted automatically. Please add the galaxy/conda requirement manually or modify the requirements file!-->
  </requirements>
  <command detect_errors="exit_code">ipython '$__tool_directory__/${C_data_product_.DPselector_}.py'</command>
  <environment_variables>
    <environment_variable name="BASEDIR">$__tool_directory__</environment_variable>
    <environment_variable name="GALAXY_TOOL_DIR">$__tool_directory__</environment_variable>
  </environment_variables>
  <configfiles>
    <inputs name="inputs" filename="inputs.json" data_style="paths" />
  </configfiles>
  <inputs>
    <conditional name="C_data_product_">
      <param name="DPselector_" type="select" label="Data Product">
        <option value="Catalog" selected="true">Catalog</option>
        <option value="Spectrum" selected="false">Spectrum</option>
        <option value="Image" selected="false">Image</option>
      </param>
      <when value="Catalog">
        <param name="src_name" type="text" value="Mrk 421" label="src_name" optional="false" />
        <param name="RA" type="float" value="166.113808" label="RA (unit: deg)" optional="false" />
        <param name="DEC" type="float" value="38.208833" label="DEC (unit: deg)" optional="false" />
        <param name="Radius" type="float" value="1" label="Radius (unit: arcmin)" optional="false" />
        <param name="data_release" type="integer" value="10" label="Data Release" optional="false" />
      </when>
      <when value="Spectrum">
        <param name="src_name" type="text" value="Mrk 421" label="src_name" optional="false" />
        <param name="RA" type="float" value="166.113808" label="RA (unit: deg)" optional="false" />
        <param name="DEC" type="float" value="38.208833" label="DEC (unit: deg)" optional="false" />
        <param name="Radius" type="float" value="0.1" label="Radius (unit: arcmin)" optional="false" />
        <param name="data_release" type="integer" value="10" label="Data Release" optional="false" />
      </when>
      <when value="Image">
        <param name="src_name" type="text" value="Mrk 421" label="src_name" optional="false" />
        <param name="RA" type="float" value="166.113808" label="RA (unit: deg)" optional="false" />
        <param name="DEC" type="float" value="38.208833" label="DEC (unit: deg)" optional="false" />
        <param name="Radius" type="float" value="3" label="Radius (unit: arcmin)" optional="false" />
        <param name="pixsize" type="float" value="1.0" label="Pixel size (unit: arcsec)" optional="false" />
        <param name="band" type="select" label="Band" optional="false">
          <option value="g" selected="true">g</option>
          <option value="i">i</option>
          <option value="r">r</option>
          <option value="z">z</option>
        </param>
        <param name="data_release" type="integer" value="10" label="Data Release" optional="false" />
      </when>
    </conditional>
  </inputs>
  <outputs>
    <data label="${tool.name} -&gt; Catalog catalog_table" name="out_Catalog_catalog_table" format="auto" from_work_dir="catalog_table_galaxy.output">
      <filter>C_data_product_['DPselector_'] == 'Catalog'</filter>
    </data>
    <data label="${tool.name} -&gt; Catalog dictionary_filters" name="out_Catalog_dictionary_filters" format="auto" from_work_dir="dictionary_filters_galaxy.output">
      <filter>C_data_product_['DPselector_'] == 'Catalog'</filter>
    </data>
    <data label="${tool.name} -&gt; Spectrum spectrum_table" name="out_Spectrum_spectrum_table" format="auto" from_work_dir="spectrum_table_galaxy.output">
      <filter>C_data_product_['DPselector_'] == 'Spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; Spectrum spectrum_png" name="out_Spectrum_spectrum_png" format="auto" from_work_dir="spectrum_png_galaxy.output">
      <filter>C_data_product_['DPselector_'] == 'Spectrum'</filter>
    </data>
    <data label="${tool.name} -&gt; Image picture" name="out_Image_picture" format="auto" from_work_dir="picture_galaxy.output">
      <filter>C_data_product_['DPselector_'] == 'Image'</filter>
    </data>
    <data label="${tool.name} -&gt; Image fits" name="out_Image_fits" format="auto" from_work_dir="fits_galaxy.output">
      <filter>C_data_product_['DPselector_'] == 'Image'</filter>
    </data>
  </outputs>
  <tests>
    <test expect_num_outputs="2">
      <conditional name="C_data_product_">
        <param name="DPselector_" value="Catalog" />
        <param name="src_name" value="Mrk 421" />
        <param name="RA" value="166.113808" />
        <param name="DEC" value="38.208833" />
        <param name="Radius" value="1" />
        <param name="data_release" value="10" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="2">
      <conditional name="C_data_product_">
        <param name="DPselector_" value="Spectrum" />
        <param name="src_name" value="Mrk 421" />
        <param name="RA" value="166.113808" />
        <param name="DEC" value="38.208833" />
        <param name="Radius" value="0.1" />
        <param name="data_release" value="10" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
    <test expect_num_outputs="2">
      <conditional name="C_data_product_">
        <param name="DPselector_" value="Image" />
        <param name="src_name" value="Mrk 421" />
        <param name="RA" value="166.113808" />
        <param name="DEC" value="38.208833" />
        <param name="Radius" value="3" />
        <param name="pixsize" value="1.0" />
        <param name="band" value="g" />
        <param name="data_release" value="10" />
      </conditional>
      <assert_stdout>
        <has_text text="*** Job finished successfully ***" />
      </assert_stdout>
    </test>
  </tests>
  <help>Query DESI Legacy Surveys data
==============================

This tool can be used to query the DESI `Legacy
Surveys &lt;https://www.legacysurvey.org/&gt;`__ data, i.e.&#160;`catalogs of
sources &lt;Catalog.ipynb&gt;`__ and `sky Images &lt;Image.ipynb&gt;`__.
Additionally, using the third `sub-tool &lt;Spectrum.ipynb&gt;`__, one can
compute the total flux per filter (band) for a catalog of sources
queried around a given region.

Input
-----

All sub-tools share the following required input parameters:

1. **R.A.** - Right Ascension in degrees *(float)*
2. **Dec** &#8211; Declination in degrees *(float)*
3. **Radius** &#8211; Image size or cone search radius in arcminutes *(float)*
4. **Data Release (DR)** &#8211; Legacy Surveys data release, e.g., ``9`` or
   ``10``

In order to query images, the following parameters are required as well:

5. **Pixel size** &#8211; Image pixel size in arcseconds *(float)*
6. **Band** &#8211; Photometric filter for the image:

   - ``i`` (for DR10)
   - ``g``, ``r``, ``z``

Output
------

Catalog of sources (first sub-tool)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The resulting catalog includes the following columns (see full
descriptions on the `Legacy Surveys tractor catalog
page &lt;https://www.legacysurvey.org/dr10/catalogs/&gt;`__):

- **Coordinates &amp; Object Info:**

  - ``RA``, ``DEC`` &#8211; Right ascension and declination in degrees
  - ``Type`` &#8211; Object type (e.g., PSF, EXP, DEV, COMP)

- **Fluxes (in &#181;Jy):**

  - ``flux_g``, ``flux_g_err`` &#8211; g-band flux and associated error
  - ``flux_r``, ``flux_r_err`` &#8211; r-band flux and associated error
  - ``flux_z``, ``flux_z_err`` &#8211; z-band flux and associated error
  - ``flux_i``, ``flux_i_err`` &#8211; i-band flux and associated error (only
    in DR10)
  - ``flux_w1``, ``flux_w1_err`` &#8211; WISE W1 band flux and error
  - ``flux_w2``, ``flux_w2_err`` &#8211; WISE W2 band flux and error
  - ``flux_w3``, ``flux_w3_err`` &#8211; WISE W3 band flux and error
  - ``flux_w4``, ``flux_w4_err`` &#8211; WISE W4 band flux and error

- **Additional Information:**

  - ``ebv`` &#8211; Galactic extinction E(B&#8211;V)
  - ``ref_cat`` &#8211; Reference catalogs the stars in the catalog
  - ``shape_r`` &#8211; Half-light radius of galaxy model for galaxy type (in
    arcseconds)

All fluxes are provided in **microJanskys (&#181;Jy)**.

In addition, this sub-tool outputs a **dictionary** that maps the flux
column names to the corresponding filter names expected by the `mmoda
photoz-euclid
tool &lt;https://gitlab.renkulab.io/astronomy/mmoda/photoz-euclid&gt;`__. This
facilitates seamless integration between the catalog output and the
photometric redshift estimation pipeline.

Image querying (second sub-tool)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The output of the sky image query from the Legacy Survey includes:

- **FITS file** &#8211; The raw image data as returned by the Legacy Survey
  servers, stored in standard FITS format.
- **PNG image** &#8211; A visual rendering of the FITS image generated using
  ``matplotlib.pyplot.imshow()`` for quick inspection and visualization.

The PNG image provides a convenient preview, while the FITS file can be
used for scientific analysis and further processing.

Spectral flux computation (third sub-tool)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The output includes:

- **Table of integrated fluxes** &#8211; A table listing the total
  fluxmeasured in each photometric band over the queried region.
- **Figure** &#8211; A plot showing the flux as a function of the average
  energy (or wavelength) of each filter band, providing a basic spectral
  energy distribution (SED) overview.

Acknowledgement
---------------

This project uses a simplified version of the `astroquery DESI
module &lt;https://github.com/oda-hub/astroquery/tree/master/astroquery/desi&gt;`__,
implemented in ```desi.py`` &lt;desi.py&gt;`__.
</help>
  <citations>
    <citation type="doi">10.3847/1538-3881/ab089d</citation>
  </citations>
</tool>